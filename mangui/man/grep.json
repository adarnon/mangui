{
    "name": "grep, egrep, fgrep, rgrep - print lines matching a pattern",
    "synopsis": [
        "grep [OPTIONS] PATTERN [FILE...]",
        "grep [OPTIONS] [-e PATTERN | -f FILE] [FILE...]ls [OPTION]... [FILE]..."
    ],
    "description": "grep  searches the named input FILEs (or standard input if no files are\nnamed, or if a single hyphen-minus (-) is given as file name) for lines\ncontaining  a  match to the given PATTERN.  By default, grep prints the\nmatching lines.\nIn  addition,  three  variant  programs  egrep,  fgrep  and  rgrep  are\navailable.   egrep  is  the  same  as  grep -E.   fgrep  is the same as\ngrep -F.  rgrep is the same as grep -r.  Direct  invocation  as  either\negrep  or  fgrep  is  deprecated,  but  is provided to allow historical\napplications that rely on them to run unmodified.",
    "options": [
        {
            "cmds": [
                "--help"
            ],
            "desc": "Print a usage message  briefly  summarizing  these  command-line\noptions and the bug-reporting address, then exit."
        },
        {
            "cmds": [
                "-V",
                "--version"
            ],
            "desc": "Print  the version number of grep to the standard output stream.\nThis version number should be included in all bug  reports  (see\nbelow)."
        },
        {
            "cmds": [
                "-E",
                "--extended-regexp"
            ],
            "desc": "Interpret  PATTERN  as  an extended regular expression (ERE, see\nbelow).  (-E is specified by POSIX.)"
        },
        {
            "cmds": [
                "-F",
                "--fixed-strings"
            ],
            "desc": "Interpret PATTERN as a  list  of  fixed  strings,  separated  by\nnewlines,  any  of  which is to be matched.  (-F is specified by\nPOSIX.)"
        },
        {
            "cmds": [
                "-G",
                "--basic-regexp"
            ],
            "desc": "Interpret PATTERN  as  a  basic  regular  expression  (BRE,  see\nbelow).  This is the default."
        },
        {
            "cmds": [
                "-P",
                "--perl-regexp"
            ],
            "desc": "Interpret  PATTERN as a Perl regular expression.  This is highly\nexperimental and grep -P may warn of unimplemented features."
        },
        {
            "cmds": [
                "-e"
            ],
            "desc": "PATTERN, --regexp=PATTERN\nUse PATTERN as  the  pattern.   This  can  be  used  to  specify\nmultiple search patterns, or to protect a pattern beginning with\na hyphen (-).  (-e is specified by POSIX.)"
        },
        {
            "cmds": [
                "-f"
            ],
            "desc": "FILE, --file=FILE\nObtain patterns  from  FILE,  one  per  line.   The  empty  file\ncontains  zero  patterns, and therefore matches nothing.  (-f is\nspecified by POSIX.)"
        },
        {
            "cmds": [
                "-i",
                "--ignore-case"
            ],
            "desc": "Ignore case distinctions in  both  the  PATTERN  and  the  input\nfiles.  (-i is specified by POSIX.)"
        },
        {
            "cmds": [
                "-v",
                "--invert-match"
            ],
            "desc": "Invert the sense of matching, to select non-matching lines.  (-v\nis specified by POSIX.)"
        },
        {
            "cmds": [
                "-w",
                "--word-regexp"
            ],
            "desc": "Select only those  lines  containing  matches  that  form  whole\nwords.   The  test is that the matching substring must either be\nat the  beginning  of  the  line,  or  preceded  by  a  non-word\nconstituent  character.  Similarly, it must be either at the end\nof the line or followed by  a  non-word  constituent  character.\nWord-constituent   characters   are  letters,  digits,  and  the\nunderscore."
        },
        {
            "cmds": [
                "-x",
                "--line-regexp"
            ],
            "desc": "Select only those matches that exactly  match  the  whole  line.\n(-x is specified by POSIX.)"
        },
        {
            "cmds": [
                "-y"
            ],
            "desc": "Obsolete synonym for -i."
        },
        {
            "cmds": [
                "-c",
                "--count"
            ],
            "desc": "Suppress  normal output; instead print a count of matching lines\nfor each input file.  With the -v,  --invert-match  option  (see\nbelow), count non-matching lines.  (-c is specified by POSIX.)"
        },
        {
            "cmds": [
                "--color[=WHEN]",
                "--colour[=WHEN]"
            ],
            "desc": "Surround   the  matched  (non-empty)  strings,  matching  lines,\ncontext lines, file  names,  line  numbers,  byte  offsets,  and\nseparators  (for fields and groups of context lines) with escape\nsequences to display them in color on the terminal.  The  colors\nare  defined  by  the  environment  variable  GREP_COLORS.   The\ndeprecated environment variable GREP_COLOR is  still  supported,\nbut  its setting does not have priority.  WHEN is never, always,\nor auto."
        },
        {
            "cmds": [
                "-L",
                "--files-without-match"
            ],
            "desc": "Suppress normal output; instead print the  name  of  each  input\nfile from which no output would normally have been printed.  The\nscanning will stop on the first match."
        },
        {
            "cmds": [
                "-l",
                "--files-with-matches"
            ],
            "desc": "Suppress normal output; instead print the  name  of  each  input\nfile  from  which  output would normally have been printed.  The\nscanning will stop on the first  match.   (-l  is  specified  by\nPOSIX.)"
        },
        {
            "cmds": [
                "--count"
            ],
            "desc": "NUM, --max-count=NUM\nStop  reading  a file after NUM matching lines.  If the input is\nstandard input from a regular file, and NUM matching  lines  are\noutput,  grep  ensures  that the standard input is positioned to\njust after the last matching line before exiting, regardless  of\nthe  presence of trailing context lines.  This enables a calling\nprocess to resume a search.  When grep stops after NUM  matching\nlines,  it  outputs  any trailing context lines.  When the -c or\noption is also  used,  grep  does  not  output  a  count\ngreater  than NUM.  When the -v or --invert-match option is also\nused, grep stops after outputting NUM non-matching lines."
        },
        {
            "cmds": [
                "-o",
                "--only-matching"
            ],
            "desc": "Print only the matched (non-empty) parts  of  a  matching  line,\nwith each such part on a separate output line."
        },
        {
            "cmds": [
                "-q",
                "--quiet",
                "--silent"
            ],
            "desc": "Quiet;   do   not  write  anything  to  standard  output.   Exit\nimmediately with zero status if any match is found, even  if  an\nerror  was  detected.   Also see the -s or --no-messages option.\n(-q is specified by POSIX.)"
        },
        {
            "cmds": [
                "-s",
                "--no-messages"
            ],
            "desc": "Suppress error messages about nonexistent or  unreadable  files.\nPortability note: unlike GNU grep, 7th Edition Unix grep did not\nconform to POSIX, because it lacked -q and its -s option behaved\nlike  GNU  grep's  -q option.  USG-style grep also lacked -q but\nits -s option behaved like GNU  grep.   Portable  shell  scripts\nshould  avoid  both  -q  and -s and should redirect standard and\nerror output to /dev/null instead.  (-s is specified by POSIX.)"
        },
        {
            "cmds": [
                "-b",
                "--byte-offset"
            ],
            "desc": "Print the 0-based byte offset within the input file before  each\nline of output.  If -o (--only-matching) is specified, print the\noffset of the matching part itself."
        },
        {
            "cmds": [
                "-H",
                "--with-filename"
            ],
            "desc": "Print the file name for each match.  This is  the  default  when\nthere is more than one file to search."
        },
        {
            "cmds": [
                "-h",
                "--no-filename"
            ],
            "desc": "Suppress  the  prefixing  of  file names on output.  This is the\ndefault when there is only one file (or only standard input)  to\nsearch."
        },
        {
            "cmds": [
                "--label=LABEL"
            ],
            "desc": "Display  input  actually  coming  from  standard  input as input\ncoming from file LABEL.  This is  especially  useful  for  tools\nlike zgrep, e.g., gzip -cd foo.gz | grep --label=foo something"
        },
        {
            "cmds": [
                "-n",
                "--line-number"
            ],
            "desc": "Prefix  each  line of output with the 1-based line number within\nits input file.  (-n is specified by POSIX.)"
        },
        {
            "cmds": [
                "-T",
                "--initial-tab"
            ],
            "desc": "Make sure that the first character of actual line  content  lies\non a tab stop, so that the alignment of tabs looks normal.  This\nis useful with options that prefix their output  to  the  actual\ncontent:  -H,-n,  and  -b.   In order to improve the probability\nthat lines from a single file will all start at the same column,\nthis also causes the line number and byte offset (if present) to\nbe printed in a minimum size field width."
        },
        {
            "cmds": [
                "-u",
                "--unix-byte-offsets"
            ],
            "desc": "Report Unix-style byte offsets.   This  switch  causes  grep  to\nreport  byte offsets as if the file were a Unix-style text file,\ni.e., with  CR  characters  stripped  off.   This  will  produce\nresults  identical  to  running  grep  on  a Unix machine.  This\noption has no effect unless -b option is also used;  it  has  no\neffect on platforms other than MS-DOS and MS-Windows."
        },
        {
            "cmds": [
                "-print0",
                " perl  -0",
                " sort  -z",
                "and xargs -0 to process arbitrary"
            ],
            "desc": "Output  a  zero  byte  (the  ASCII NUL character) instead of the\ncharacter that normally follows a file name.  For example,  grep\noutputs  a  zero  byte  after each file name instead of the\nusual newline.  This option makes the output  unambiguous,  even\nin the presence of file names containing unusual characters like\nnewlines.  This option can  be  used  with  commands  like  find\nfile names, even those that contain newline characters."
        },
        {
            "cmds": [
                "-A"
            ],
            "desc": "NUM, --after-context=NUM\nPrint NUM  lines  of  trailing  context  after  matching  lines.\nPlaces   a  line  containing  a  group  separator  (--)  between\ncontiguous groups of matches.  With the  -o  or  --only-matching\noption, this has no effect and a warning is given."
        },
        {
            "cmds": [
                "-B"
            ],
            "desc": "NUM, --before-context=NUM\nPrint  NUM  lines  of  leading  context  before  matching lines.\nPlaces  a  line  containing  a  group  separator  (--)   between\ncontiguous  groups  of  matches.  With the -o or --only-matching\noption, this has no effect and a warning is given."
        },
        {
            "cmds": [
                "-C"
            ],
            "desc": "NUM, -NUM, --context=NUM\nPrint NUM lines of output context.  Places a line  containing  a\ngroup separator (--) between contiguous groups of matches.  With\nthe -o or --only-matching option,  this  has  no  effect  and  a\nwarning is given."
        },
        {
            "cmds": [
                "-a",
                "--text"
            ],
            "desc": "Process  a binary file as if it were text; this is equivalent to\nthe --binary-files=text option."
        },
        {
            "cmds": [
                "--binary-files=text"
            ],
            "desc": "If the first few bytes of a file indicate that the file contains\nbinary  data, assume that the file is of type TYPE.  By default,\nTYPE is binary, and grep  normally  outputs  either  a  one-line\nmessage  saying  that  a  binary  file matches, or no message if\nthere is no match.  If TYPE is without-match, grep assumes  that\na  binary  file  does  not  match;  this is equivalent to the -I\noption.  If TYPE is text, grep processes a binary file as if  it\nwere  text;  this is equivalent to the -a option.  Warning: grep\nmight output binary garbage, which can  have\nnasty  side  effects  if  the  output  is  a terminal and if the\nterminal driver interprets some of it as commands."
        },
        {
            "cmds": [
                "-D"
            ],
            "desc": "ACTION, --devices=ACTION\nIf an input file is a device, FIFO  or  socket,  use  ACTION  to\nprocess  it.   By  default,  ACTION  is  read,  which means that\ndevices are read just as if they were ordinary files.  If ACTION\nis skip, devices are silently skipped."
        },
        {
            "cmds": [
                "-d"
            ],
            "desc": "ACTION, --directories=ACTION\nIf  an  input file is a directory, use ACTION to process it.  By\ndefault, ACTION is read, which means that directories  are  read\njust  as  if  they  were  ordinary  files.   If  ACTION is skip,\ndirectories are silently skipped.  If ACTION  is  recurse,  grep\nreads  all  files  under  each  directory,  recursively; this is\nequivalent to the -r option."
        },
        {
            "cmds": [
                "--exclude=GLOB"
            ],
            "desc": "Skip  files  whose  base  name  matches  GLOB  (using   wildcard\nmatching).   A  file-name  glob  can  use  *,  ?,  and [...]  as\nwildcards, and \\ to quote  a  wildcard  or  backslash  character\nliterally."
        },
        {
            "cmds": [
                "--exclude)."
            ],
            "desc": "Skip  files  whose  base name matches any of the file-name globs\nread from FILE  (using  wildcard  matching  as  described  under"
        },
        {
            "cmds": [
                "--exclude-dir=DIR"
            ],
            "desc": "Exclude  directories  matching  the  pattern  DIR from recursive\nsearches."
        },
        {
            "cmds": [
                "-I"
            ],
            "desc": "Process a binary file as if it did not  contain  matching  data;\nthis is equivalent to the --binary-files=without-match option."
        },
        {
            "cmds": [
                "--include=GLOB"
            ],
            "desc": "Search  only  files whose base name matches GLOB (using wildcard\nmatching as described under --exclude)."
        },
        {
            "cmds": [
                "-R",
                "-r",
                "--recursive"
            ],
            "desc": "Read all  files  under  each  directory,  recursively;  this  is\nequivalent to the -d recurse option."
        },
        {
            "cmds": [
                "--line-buffered"
            ],
            "desc": "Use  line  buffering  on  output.   This can cause a performance\npenalty."
        },
        {
            "cmds": [
                "--mmap"
            ],
            "desc": "If possible, use the mmap(2) system call to read input,  instead\nof  the default read(2) system call.  In some situations, --mmap\nyields better performance.  However, --mmap can cause  undefined\nbehavior  (including  core dumps) if an input file shrinks while\ngrep is operating, or if an I/O error occurs."
        },
        {
            "cmds": [
                "-U",
                "--binary"
            ],
            "desc": "Treat the file(s) as binary.  By default, under MS-DOS  and  MS-\nWindows,  grep  guesses the file type by looking at the contents\nof the first 32KB read from the file.  If grep decides the  file\nis  a  text  file, it strips the CR characters from the original\nfile contents (to make regular expressions with  ^  and  $  work\ncorrectly).  Specifying -U overrules this guesswork, causing all\nfiles to be read and passed to the matching mechanism  verbatim;\nif  the  file is a text file with CR/LF pairs at the end of each\nline, this will cause some regular expressions  to  fail.   This\noption  has  no  effect  on  platforms other than MS-DOS and MS-\nWindows."
        },
        {
            "args": [
                "-Z"
            ],
            "desc": "Treat the input as a set of lines, each  terminated  by  a  zero\nbyte  (the  ASCII NUL character) instead of a newline.  Like the\nor --null option, this option can be used with commands  like\nsort -z to process arbitrary file names."
        }
    ]
}
